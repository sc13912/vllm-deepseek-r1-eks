apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: vllm-cluster
  region: us-east-2
  version: "1.32" # Latest stable EKS version


managedNodeGroups:
  - name: vllm-p5e-nodes-efa
    instanceType: p5e.48xlarge
    minSize: 0
    maxSize: 2
    desiredCapacity: 2
    availabilityZones: [us-east-2c]  
    volumeSize: 100
    privateNetworking: true
    # Use the EKS-optimized GPU AMI
    ami: ami-xxxx # replace with the desired EKS GPU AMI in your selected Region
    amiFamily: AmazonLinux2
    labels:
      role: large-model-worker
      nvidia.com/gpu: "true"
      k8s.amazonaws.com/accelerator: nvidia-gpu
      aws.amazon.com/efa: "true"  # Add EFA label
    tags:
      nodegroup-role: large-model-worker
    iam:
      withAddonPolicies:
        autoScaler: true
        albIngress: true
        cloudWatch: true
        ebs: true
        imageBuilder: true
    # Enable EFA interfaces
    efaEnabled: true
    # Capacity Reservations for AI/ML nodes 
    capacityReservation:
      capacityReservationTarget:
        capacityReservationID: "cr-xxxx" # replace with your own capacity reservation id
    instanceMarketOptions:
      marketType: capacity-block
    # Override bootstrap command for custom AMI
    overrideBootstrapCommand: |
      #!/bin/bash
      set -ex
      
      # Install EFA driver and related packages
      curl -O https://efa-installer.amazonaws.com/aws-efa-installer-latest.tar.gz
      tar -xf aws-efa-installer-latest.tar.gz
      cd aws-efa-installer
      ./efa_installer.sh -y
      
      # Configure NCCL to use EFA
      echo "export FI_PROVIDER=efa" >> /etc/environment
      echo "export FI_EFA_USE_DEVICE_RDMA=1" >> /etc/environment
      echo "export NCCL_DEBUG=INFO" >> /etc/environment
      
      # Standard EKS bootstrap
      /etc/eks/bootstrap.sh vllm-cluster --container-runtime containerd
